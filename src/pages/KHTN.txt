import React, { useState, useEffect, useCallback, useRef } from 'react';
import {
    Plus, Edit, Trash, Search, Filter, X, Upload, ChevronDown,
    ChevronLeft, ChevronRight, RefreshCw, Sun, Moon, Calendar , FileText
} from 'lucide-react';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import * as XLSX from 'xlsx';
import Swal from 'sweetalert2';
import authUtils from '../utils/authUtils';

const KHTNManagement = () => {
    // State cho danh sách khách hàng
    const [khtnList, setKhtnList] = useState([]);
    const [filteredList, setFilteredList] = useState([]);

    // State cho form
    const [currentItem, setCurrentItem] = useState({
        'ID_CTY': '',
        'NGÀY GHI NHẬN': '',
        'TÊN CÔNG TY': '',
        'TÊN VIẾT TẮT': '',
        'EMAIL CÔNG TY': '',
        'MST': '',
        'NGÀY THÀNH LẬP CTY': '',
        'ĐỊA CHỈ': '',
        'NGƯỜI LIÊN HỆ': '',
        'SỐ ĐT NGƯỜI LIÊN HỆ': '',
        'EMAIL NGƯỜI LIÊN HỆ': '',
        'SINH NHẬT NGƯỜI LIÊN HỆ': '',
        'CHỨC VỤ': '',
        'NGUỒN': '',
        'TÊN NGƯỜI GIỚI THIỆU': '',
        'SỐ ĐT NGƯỜI GIỚI THIỆU': '',
        'SALES PHỤ TRÁCH': '',
        'CHỐT THÀNH KH': '',
        'NGÀY CHỐT THÀNH KH': '',
        'NHU CẦU': '',
        'GHI CHÚ NHU CẦU': '',
        'ĐÁNH GIÁ TIỂM NĂNG': '',
        'NHÂN VIÊN CHĂM SÓC': '',
        'SỐ CHỨNG TỪ': '',
        'SỐ TIỀN': '',
        'LỊCH SỬ': '',
    });

    // State cho phân trang
    const [currentPage, setCurrentPage] = useState(1);
    const [itemsPerPage, setItemsPerPage] = useState(10);
    const [totalPages, setTotalPages] = useState(1);

    const [loading, setLoading] = useState(false);
    const [search, setSearch] = useState('');
    const [isEditMode, setIsEditMode] = useState(false);
    const [showModal, setShowModal] = useState(false);
    const [showDeleteConfirmation, setShowDeleteConfirmation] = useState(false);
    const [itemToDelete, setItemToDelete] = useState(null);
    const [isSubmitting, setIsSubmitting] = useState(false);

    // State cho dropdown
    const [showNguonDropdown, setShowNguonDropdown] = useState(false);
    const [showTrangThaiDropdown, setShowTrangThaiDropdown] = useState(false);
    const [showDanhGiaDropdown, setShowDanhGiaDropdown] = useState(false);
    const [showNhuCauDropdown, setShowNhuCauDropdown] = useState(false);

    // State cho Excel import
    const [excelData, setExcelData] = useState(null);
    const [showPreview, setShowPreview] = useState(false);

    // Refs
    const nguonDropdownRef = useRef(null);
    const trangThaiDropdownRef = useRef(null);
    const danhGiaDropdownRef = useRef(null);
    const nhuCauDropdownRef = useRef(null);
    const fileInputRef = useRef(null);

    // Options
    const nguonOptions = [
        'Facebook', 'Zalo OA', 'Google Ads', 'Hotline', 'Sales tự tìm',
        'CTV/ Referrals', 'Giới thiệu', 'Hội chợ/ Hội thảo', 'Hiệp hội', 'BGĐ giao', 'Khác'
    ];

    const trangThaiOptions = [
        'Chưa', 'Đã chốt'
    ];

    const danhGiaOptions = [
        '⭐', '⭐⭐', '⭐⭐⭐', '⭐⭐⭐⭐', '⭐⭐⭐⭐⭐'
    ];

    const nhuCauOptions = [
        'TCC', '1. Ý tưởng sơ bộ', '2. Đã tìm hiểu một số thông tin',
        '3. Đã có nhiều kiến thức về SP/DV', 'Khác'
    ];

    // Effect hooks
    useEffect(() => {
        // Kiểm tra dark mode
       
        // Tải danh sách khách hàng khi component được render
        loadKHTNList();

        // Thiết lập ID công ty mới và ngày ghi nhận là ngày hiện tại
        resetForm();
    }, []);

    // Cập nhật totalPages khi filteredList hoặc itemsPerPage thay đổi
    useEffect(() => {
        setTotalPages(Math.ceil(filteredList.length / itemsPerPage));
        // Reset về trang 1 khi lọc thay đổi
        setCurrentPage(1);
    }, [filteredList, itemsPerPage]);

    // Xử lý click bên ngoài dropdown
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (nguonDropdownRef.current && !nguonDropdownRef.current.contains(event.target)) {
                setShowNguonDropdown(false);
            }
            if (trangThaiDropdownRef.current && !trangThaiDropdownRef.current.contains(event.target)) {
                setShowTrangThaiDropdown(false);
            }
            if (danhGiaDropdownRef.current && !danhGiaDropdownRef.current.contains(event.target)) {
                setShowDanhGiaDropdown(false);
            }
            if (nhuCauDropdownRef.current && !nhuCauDropdownRef.current.contains(event.target)) {
                setShowNhuCauDropdown(false);
            }
        };

        document.addEventListener('mousedown', handleClickOutside);
        return () => {
            document.removeEventListener('mousedown', handleClickOutside);
        };
    }, []);

    // Helper functions
    const formatDate = (date) => {
        if (!date) return '';

        if (typeof date === 'string') {
            // Nếu đã là chuỗi định dạng yyyy-mm-dd thì trả về
            if (/^\d{4}-\d{2}-\d{2}$/.test(date)) return date;

            // Nếu là chuỗi khác định dạng, chuyển thành đối tượng Date
            date = new Date(date);
        }

        // Nếu date không hợp lệ
        if (!(date instanceof Date) || isNaN(date)) return '';

        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');

        return `${year}-${month}-${day}`;
    };

    const generateIdCty = () => {
        const today = new Date();
        const year = today.getFullYear().toString().slice(-2);
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
        return `CTY${year}${month}${day}${random}`;
    };

    // Debounce function
    const debounce = (func, wait) => {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    };

   
    // Load KHTN list
    const loadKHTNList = async (forceRefresh = false) => {
        try {
            setLoading(true);

            const response = await authUtils.apiRequest('KHTN', 'Find', {
                Properties: {
                    Locale: "vi-VN",
                    Timezone: "Asia/Ho_Chi_Minh",
                    Selector: "Filter(KHTN, true)"
                }
            });

            if (response) {
                setKhtnList(response);
                setFilteredList(response);
            }

            setLoading(false);
        } catch (error) {
            console.error('Lỗi khi tải danh sách KHTN:', error);
            setLoading(false);

            toast.error('Không thể tải danh sách khách hàng tiềm năng. Vui lòng thử lại sau.');
        }
    };

    // Search function
    const searchKHTN = (keyword) => {
        setLoading(true);

        setTimeout(() => {
            if (!keyword) {
                setFilteredList(khtnList);
            } else {
                const searchTerm = keyword.toLowerCase();
                const filtered = khtnList.filter(khtn => {
                    const tenCongTy = (khtn['TÊN CÔNG TY'] || '').toLowerCase();
                    const idCty = (khtn['ID_CTY'] || '').toLowerCase();
                    const nguoiLienHe = (khtn['NGƯỜI LIÊN HỆ'] || '').toLowerCase();
                    const sdt = (khtn['SỐ ĐT NGƯỜI LIÊN HỆ'] || '').toLowerCase();
                    const email = (khtn['EMAIL CÔNG TY'] || '').toLowerCase();
                    const emailNguoiLH = (khtn['EMAIL NGƯỜI LIÊN HỆ'] || '').toLowerCase();
                    const mst = (khtn['MST'] || '').toLowerCase();

                    return tenCongTy.includes(searchTerm) ||
                        idCty.includes(searchTerm) ||
                        nguoiLienHe.includes(searchTerm) ||
                        sdt.includes(searchTerm) ||
                        email.includes(searchTerm) ||
                        emailNguoiLH.includes(searchTerm) ||
                        mst.includes(searchTerm);
                });
                setFilteredList(filtered);
            }
            setLoading(false);
        }, 300);
    };

    // Debounceed search
    const debouncedSearch = useCallback(debounce((value) => {
        searchKHTN(value);
    }, 300), [khtnList]);

    // Reset form
    const resetForm = () => {
        setCurrentItem({
            'ID_CTY': generateIdCty(),
            'NGÀY GHI NHẬN': formatDate(new Date()),
            'TÊN CÔNG TY': '',
            'TÊN VIẾT TẮT': '',
            'EMAIL CÔNG TY': '',
            'MST': '',
            'NGÀY THÀNH LẬP CTY': '',
            'ĐỊA CHỈ': '',
            'NGƯỜI LIÊN HỆ': '',
            'SỐ ĐT NGƯỜI LIÊN HỆ': '',
            'EMAIL NGƯỜI LIÊN HỆ': '',
            'SINH NHẬT NGƯỜI LIÊN HỆ': '',
            'CHỨC VỤ': '',
            'NGUỒN': '',
            'TÊN NGƯỜI GIỚI THIỆU': '',
            'SỐ ĐT NGƯỜI GIỚI THIỆU': '',
            'SALES PHỤ TRÁCH': '',
            'CHỐT THÀNH KH': 'Chưa',
            'NGÀY CHỐT THÀNH KH': '',
            'NHU CẦU': '',
            'GHI CHÚ NHU CẦU': '',
            'ĐÁNH GIÁ TIỂM NĂNG': '',
            'NHÂN VIÊN CHĂM SÓC': '',
            'SỐ CHỨNG TỪ': '',
            'SỐ TIỀN': '',
            'LỊCH SỬ': '',
        });
    };

    // Edit KHTN
    const editKHTN = (idCty) => {
        const khtn = khtnList.find(k => k['ID_CTY'] === idCty);

        if (!khtn) {
            toast.error('Không tìm thấy thông tin khách hàng tiềm năng');
            return;
        }

        setIsEditMode(true);
        setCurrentItem({
            'ID_CTY': khtn['ID_CTY'] || '',
            'NGÀY GHI NHẬN': formatDate(khtn['NGÀY GHI NHẬN']),
            'TÊN CÔNG TY': khtn['TÊN CÔNG TY'] || '',
            'TÊN VIẾT TẮT': khtn['TÊN VIẾT TẮT'] || '',
            'EMAIL CÔNG TY': khtn['EMAIL CÔNG TY'] || '',
            'MST': khtn['MST'] || '',
            'NGÀY THÀNH LẬP CTY': formatDate(khtn['NGÀY THÀNH LẬP CTY']),
            'ĐỊA CHỈ': khtn['ĐỊA CHỈ'] || '',
            'NGƯỜI LIÊN HỆ': khtn['NGƯỜI LIÊN HỆ'] || '',
            'SỐ ĐT NGƯỜI LIÊN HỆ': khtn['SỐ ĐT NGƯỜI LIÊN HỆ'] || '',
            'EMAIL NGƯỜI LIÊN HỆ': khtn['EMAIL NGƯỜI LIÊN HỆ'] || '',
            'SINH NHẬT NGƯỜI LIÊN HỆ': formatDate(khtn['SINH NHẬT NGƯỜI LIÊN HỆ']),
            'CHỨC VỤ': khtn['CHỨC VỤ'] || '',
            'NGUỒN': khtn['NGUỒN'] || '',
            'TÊN NGƯỜI GIỚI THIỆU': khtn['TÊN NGƯỜI GIỚI THIỆU'] || '',
            'SỐ ĐT NGƯỜI GIỚI THIỆU': khtn['SỐ ĐT NGƯỜI GIỚI THIỆU'] || '',
            'SALES PHỤ TRÁCH': khtn['SALES PHỤ TRÁCH'] || '',
            'CHỐT THÀNH KH': khtn['CHỐT THÀNH KH'] || 'Chưa',
            'NGÀY CHỐT THÀNH KH': formatDate(khtn['NGÀY CHỐT THÀNH KH']),
            'NHU CẦU': khtn['NHU CẦU'] || '',
            'GHI CHÚ NHU CẦU': khtn['GHI CHÚ NHU CẦU'] || '',
            'ĐÁNH GIÁ TIỂM NĂNG': khtn['ĐÁNH GIÁ TIỂM NĂNG'] || '',
            'NHÂN VIÊN CHĂM SÓC': khtn['NHÂN VIÊN CHĂM SÓC'] || '',
            'SỐ CHỨNG TỪ': khtn['SỐ CHỨNG TỪ'] || '',
            'SỐ TIỀN': khtn['SỐ TIỀN'] || '',
            'LỊCH SỬ': khtn['LỊCH SỬ'] || '',
        });

        setShowModal(true);
    };

    // Delete KHTN
    const deleteKHTN = async () => {
        if (!itemToDelete) return;

        try {
            setLoading(true);

            await authUtils.apiRequest('KHTN', 'Delete', {
                Properties: {
                    Locale: "vi-VN",
                    Timezone: "Asia/Ho_Chi_Minh"
                },
                Rows: [
                    { 'ID_CTY': itemToDelete['ID_CTY'] }
                ]
            });

            setLoading(false);
            setShowDeleteConfirmation(false);
            setItemToDelete(null);

            toast.success('Khách hàng tiềm năng đã được xóa thành công');

            // Cập nhật lại danh sách
            await loadKHTNList(true);

        } catch (error) {
            console.error('Lỗi khi xóa KHTN:', error);
            setLoading(false);

            toast.error('Không thể xóa khách hàng tiềm năng. Vui lòng thử lại sau.');
        }
    };

    // Save KHTN
    const saveKHTN = async (e) => {
        if (e) e.preventDefault();
        if (isSubmitting) return;

        // Kiểm tra dữ liệu bắt buộc
        const tenCongTy = currentItem['TÊN CÔNG TY'].trim();
        const nguoiLienHe = currentItem['NGƯỜI LIÊN HỆ'].trim();
        const sdtNguoiLienHe = currentItem['SỐ ĐT NGƯỜI LIÊN HỆ'].trim();

        if (!tenCongTy || !nguoiLienHe || !sdtNguoiLienHe) {
            toast.error('Vui lòng điền đầy đủ tên công ty, người liên hệ và số điện thoại');
            return;
        }

        try {
            setIsSubmitting(true);
            setLoading(true);

            if (isEditMode) {
                // Edit existing item
                await authUtils.apiRequest('KHTN', 'Edit', {
                    Properties: {
                        Locale: "vi-VN",
                        Timezone: "Asia/Ho_Chi_Minh"
                    },
                    Rows: [currentItem]
                });

                toast.success('Cập nhật thành công!');
            } else {
                // Create new item
                await authUtils.apiRequest('KHTN', 'Add', {
                    Properties: {
                        Locale: "vi-VN",
                        Timezone: "Asia/Ho_Chi_Minh"
                    },
                    Rows: [currentItem]
                });

                toast.success('Thêm mới thành công!');
            }

            // Cập nhật lại danh sách
            await loadKHTNList(true);

            setIsSubmitting(false);
            setLoading(false);
            setShowModal(false);

            // Reset form nếu là thêm mới
            if (!isEditMode) {
                resetForm();
            }

        } catch (error) {
            console.error('Lỗi khi lưu KHTN:', error);
            setIsSubmitting(false);
            setLoading(false);

            toast.error('Có lỗi xảy ra khi lưu thông tin. Vui lòng thử lại sau.');
        }
    };

    // Fetch company info
    const fetchCompanyInfo = async (taxCode) => {
        if (!taxCode || taxCode.trim() === '') {
            toast.warning('Vui lòng nhập mã số thuế trước khi tra cứu');
            return;
        }

        setLoading(true);

        try {
            const response = await fetch(`https://api.vietqr.io/v2/business/${taxCode}`);
            const data = await response.json();

            if (data && data.code === '00' && data.data) {
                const companyData = data.data;

                setCurrentItem(prev => ({
                    ...prev,
                    'TÊN CÔNG TY': companyData.name || prev['TÊN CÔNG TY'],
                    'TÊN VIẾT TẮT': companyData.shortName || prev['TÊN VIẾT TẮT'],
                    'ĐỊA CHỈ': companyData.address || prev['ĐỊA CHỈ']
                }));

                setLoading(false);
                toast.success('Đã cập nhật thông tin công ty từ mã số thuế');
            } else {
                throw new Error('Không tìm thấy thông tin doanh nghiệp');
            }
        } catch (error) {
            console.error('Lỗi khi tra cứu MST:', error);
            setLoading(false);

            toast.error('Không thể tìm thấy thông tin doanh nghiệp với mã số thuế này');
        }
    };

    // Excel functions
    const handleExcelFileChange = async (e) => {
        if (e.target.files.length === 0) return;

        const file = e.target.files[0];
        setLoading(true);

        try {
            const data = await readExcelFile(file);

            if (!data || data.length <= 1) {
                throw new Error('File không chứa dữ liệu hợp lệ');
            }

            // Extract header row
            const headers = data[0];
            const requiredColumns = ['TÊN CÔNG TY', 'NGƯỜI LIÊN HỆ', 'SỐ ĐT NGƯỜI LIÊN HỆ'];

            // Validate required columns
            let missingColumns = [];
            requiredColumns.forEach(col => {
                if (!headers.includes(col)) {
                    missingColumns.push(col);
                }
            });

            if (missingColumns.length > 0) {
                throw new Error(`File thiếu các cột bắt buộc: ${missingColumns.join(', ')}`);
            }

            // Prepare data for preview (up to 5 rows)
            const previewRows = data.slice(1, 6);

            setExcelData({
                headers: headers,
                rows: data.slice(1) // Skip header row
            });

            setShowPreview(true);
            setLoading(false);

        } catch (error) {
            console.error('Error reading Excel file:', error);
            setLoading(false);

            toast.error(error.message || 'Không thể đọc file Excel. Vui lòng kiểm tra định dạng file.');

            // Reset file input
            if (fileInputRef.current) fileInputRef.current.value = '';
        }
    };

    const readExcelFile = (file) => {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();

            reader.onload = function (e) {
                try {
                    const data = new Uint8Array(e.target.result);
                    const workbook = XLSX.read(data, { type: 'array' });

                    // Get first sheet
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];

                    // Convert to array of arrays
                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

                    resolve(jsonData);
                } catch (error) {
                    reject(error);
                }
            };

            reader.onerror = function (error) {
                reject(error);
            };

            reader.readAsArrayBuffer(file);
        });
    };

    const importExcelData = async () => {
        if (!excelData || !excelData.rows || excelData.rows.length === 0) {
            toast.error('Không có dữ liệu để nhập');
            return;
        }

        try {
            setLoading(true);

            const headers = excelData.headers;
            const rows = excelData.rows;

            // Convert rows to customer objects
            const khtnItems = rows.map(row => {
                // Generate ID for each company
                const idCty = generateIdCty();

                // Create object with all possible fields
                const khtn = {
                    'ID_CTY': idCty
                };

                // Map data from Excel to corresponding fields
                headers.forEach((header, index) => {
                    if (index < row.length) {
                        khtn[header] = row[index] || '';
                    }
                });

                return khtn;
            });

            // Filter out invalid items (must have company name and contact person with phone)
            const validItems = khtnItems.filter(item =>
                item['TÊN CÔNG TY'] &&
                item['NGƯỜI LIÊN HỆ'] &&
                item['SỐ ĐT NGƯỜI LIÊN HỆ']
            );

            if (validItems.length === 0) {
                throw new Error('Không có dữ liệu khách hàng tiềm năng hợp lệ để nhập');
            }

            // Call API to add customers
            await authUtils.apiRequest('KHTN', 'Add', {
                Properties: {
                    Locale: "vi-VN",
                    Timezone: "Asia/Ho_Chi_Minh"
                },
                Rows: validItems
            });

            // Reset and hide preview
            setShowPreview(false);
            setExcelData(null);
            if (fileInputRef.current) fileInputRef.current.value = '';

            // Reload list
            await loadKHTNList(true);

            setLoading(false);

            // Show success message
            toast.success(`Đã nhập ${validItems.length} khách hàng tiềm năng từ file Excel`);

        } catch (error) {
            console.error('Lỗi khi nhập dữ liệu:', error);
            setLoading(false);

            toast.error(error.message || 'Không thể nhập dữ liệu khách hàng tiềm năng. Vui lòng thử lại sau.');
        }
    };

    const exportToExcel = () => {
        if (khtnList.length === 0) {
            toast.warning('Không có dữ liệu khách hàng tiềm năng để xuất');
            return;
        }

        setLoading(true);

        // Prepare data for export
        setTimeout(() => {
            try {
                const exportData = [
                    ['ID_CTY', 'NGÀY GHI NHẬN', 'TÊN CÔNG TY', 'TÊN VIẾT TẮT', 'EMAIL CÔNG TY', 'MST',
                        'NGÀY THÀNH LẬP CTY', 'ĐỊA CHỈ', 'NGƯỜI LIÊN HỆ', 'SỐ ĐT NGƯỜI LIÊN HỆ', 'EMAIL NGƯỜI LIÊN HỆ',
                        'SINH NHẬT NGƯỜI LIÊN HỆ', 'CHỨC VỤ', 'NGUỒN', 'TÊN NGƯỜI GIỚI THIỆU', 'SỐ ĐT NGƯỜI GIỚI THIỆU',
                        'SALES PHỤ TRÁCH', 'CHỐT THÀNH KH', 'NGÀY CHỐT THÀNH KH', 'NHU CẦU', 'GHI CHÚ NHU CẦU',
                        'ĐÁNH GIÁ TIỂM NĂNG', 'NHÂN VIÊN CHĂM SÓC', 'SỐ CHỨNG TỪ', 'SỐ TIỀN', 'LỊCH SỬ']
                ];

                khtnList.forEach(khtn => {
                    exportData.push([
                        khtn['ID_CTY'] || '',
                        formatDate(khtn['NGÀY GHI NHẬN']),
                        khtn['TÊN CÔNG TY'] || '',
                        khtn['TÊN VIẾT TẮT'] || '',
                        khtn['EMAIL CÔNG TY'] || '',
                        khtn['MST'] || '',
                        formatDate(khtn['NGÀY THÀNH LẬP CTY']),
                        khtn['ĐỊA CHỈ'] || '',
                        khtn['NGƯỜI LIÊN HỆ'] || '',
                        khtn['SỐ ĐT NGƯỜI LIÊN HỆ'] || '',
                        khtn['EMAIL NGƯỜI LIÊN HỆ'] || '',
                        formatDate(khtn['SINH NHẬT NGƯỜI LIÊN HỆ']),
                        khtn['CHỨC VỤ'] || '',
                        khtn['NGUỒN'] || '',
                        khtn['TÊN NGƯỜI GIỚI THIỆU'] || '',
                        khtn['SỐ ĐT NGƯỜI GIỚI THIỆU'] || '',
                        khtn['SALES PHỤ TRÁCH'] || '',
                        khtn['CHỐT THÀNH KH'] || '',
                        formatDate(khtn['NGÀY CHỐT THÀNH KH']),
                        khtn['NHU CẦU'] || '',
                        khtn['GHI CHÚ NHU CẦU'] || '',
                        khtn['ĐÁNH GIÁ TIỂM NĂNG'] || '',
                        khtn['NHÂN VIÊN CHĂM SÓC'] || '',
                        khtn['SỐ CHỨNG TỪ'] || '',
                        khtn['SỐ TIỀN'] || '',
                        khtn['LỊCH SỬ'] || ''
                    ]);
                });

                // Create worksheet with better styling
                const ws = XLSX.utils.aoa_to_sheet(exportData);

                // Set column widths
                const colWidths = [
                    { wch: 15 }, // ID_CTY
                    { wch: 15 }, // NGÀY GHI NHẬN
                    { wch: 30 }, // TÊN CÔNG TY
                    { wch: 15 }, // TÊN VIẾT TẮT
                    { wch: 25 }, // EMAIL CÔNG TY
                    { wch: 15 }, // MST
                    { wch: 15 }, // NGÀY THÀNH LẬP CTY
                    { wch: 40 }, // ĐỊA CHỈ
                    { wch: 20 }, // NGƯỜI LIÊN HỆ
                    { wch: 15 }, // SỐ ĐT NGƯỜI LIÊN HỆ
                    { wch: 25 }, // EMAIL NGƯỜI LIÊN HỆ
                    { wch: 15 }, // SINH NHẬT NGƯỜI LIÊN HỆ
                    { wch: 15 }, // CHỨC VỤ
                    { wch: 15 }, // NGUỒN
                    { wch: 20 }, // TÊN NGƯỜI GIỚI THIỆU
                    { wch: 15 }, // SỐ ĐT NGƯỜI GIỚI THIỆU
                    { wch: 20 }, // SALES PHỤ TRÁCH
                    { wch: 15 }, // CHỐT THÀNH KH
                    { wch: 15 }, // NGÀY CHỐT THÀNH KH
                    { wch: 15 }, // NHU CẦU
                    { wch: 40 }, // GHI CHÚ NHU CẦU
                    { wch: 15 }, // ĐÁNH GIÁ TIỂM NĂNG
                    { wch: 20 }, // NHÂN VIÊN CHĂM SÓC
                    { wch: 15 }, // SỐ CHỨNG TỪ
                    { wch: 15 }, // SỐ TIỀN
                    { wch: 40 }  // LỊCH SỬ
                ];

                ws['!cols'] = colWidths;

                // Create workbook
                const wb = XLSX.utils.book_new();
                XLSX.utils.book_append_sheet(wb, ws, "Danh sách KHTN");

                // Generate filename with date
                const now = new Date();
                const fileName = `Danh_sach_KHTN_${formatDate(now)}.xlsx`;

                // Export file
                XLSX.writeFile(wb, fileName);

                setLoading(false);

                toast.success(`Đã xuất ${khtnList.length} khách hàng tiềm năng ra file Excel`);

            } catch (error) {
                console.error('Lỗi khi xuất dữ liệu:', error);
                setLoading(false);

                toast.error('Không thể xuất dữ liệu ra file Excel. Vui lòng thử lại sau.');
            }
        }, 500);
    };

    const createExcelTemplate = () => {
        // Create template data structure
        const templateData = [
            // Header row
            ['NGÀY GHI NHẬN', 'TÊN CÔNG TY', 'TÊN VIẾT TẮT', 'EMAIL CÔNG TY', 'MST', 'NGÀY THÀNH LẬP CTY',
                'ĐỊA CHỈ', 'NGƯỜI LIÊN HỆ', 'SỐ ĐT NGƯỜI LIÊN HỆ', 'EMAIL NGƯỜI LIÊN HỆ', 'SINH NHẬT NGƯỜI LIÊN HỆ',
                'CHỨC VỤ', 'NGUỒN', 'TÊN NGƯỜI GIỚI THIỆU', 'SỐ ĐT NGƯỜI GIỚI THIỆU', 'SALES PHỤ TRÁCH',
                'NHU CẦU', 'GHI CHÚ NHU CẦU', 'ĐÁNH GIÁ TIỂM NĂNG'],

            // Example row 1
            [formatDate(new Date()), 'Công ty TNHH ABC', 'ABC', 'contact@abc.com', '0123456789',
                '2020-01-01', 'Số 123 Đường XYZ, Quận 1, TP. HCM', 'Nguyễn Văn A', '0912345678',
                'nguyenvana@abc.com', '1985-05-15', 'Giám đốc', 'Website', '', '', 'Nguyễn Thị B',
                'TCC', 'Khách hàng quan tâm đến sản phẩm X, Y, Z', '⭐⭐'],

            // Example row 2
            [formatDate(new Date()), 'Công ty Cổ phần XYZ', 'XYZ', 'info@xyz.com', '9876543210',
                '2018-06-10', '456 Đường ABC, Quận 2, TP. HCM', 'Trần Văn C', '0987654321',
                'tranvanc@xyz.com', '1990-10-20', 'Trưởng phòng', 'Giới thiệu', 'Lê Văn D', '0976543210',
                'Phạm Thị E', 'TCC', 'Khách hàng cần tư vấn về dịch vụ A, B, C', '⭐']
        ];

        // Create a worksheet with better styling
        const ws = XLSX.utils.aoa_to_sheet(templateData);

        // Set column widths for better visibility
        const colWidths = [
            { wch: 15 }, // NGÀY GHI NHẬN
            { wch: 30 }, // TÊN CÔNG TY
            { wch: 15 }, // TÊN VIẾT TẮT
            { wch: 25 }, // EMAIL CÔNG TY
            { wch: 15 }, // MST
            { wch: 15 }, // NGÀY THÀNH LẬP CTY
            { wch: 40 }, // ĐỊA CHỈ
            { wch: 20 }, // NGƯỜI LIÊN HỆ
            { wch: 15 }, // SỐ ĐT NGƯỜI LIÊN HỆ
            { wch: 25 }, // EMAIL NGƯỜI LIÊN HỆ
            { wch: 15 }, // SINH NHẬT NGƯỜI LIÊN HỆ
            { wch: 15 }, // CHỨC VỤ
            { wch: 15 }, // NGUỒN
            { wch: 20 }, // TÊN NGƯỜI GIỚI THIỆU
            { wch: 15 }, // SỐ ĐT NGƯỜI GIỚI THIỆU
            { wch: 20 }, // SALES PHỤ TRÁCH
            { wch: 15 }, // NHU CẦU
            { wch: 40 }, // GHI CHÚ NHU CẦU
            { wch: 15 }, // ĐÁNH GIÁ TIỂM NĂNG
        ];

        ws['!cols'] = colWidths;

        // Create a workbook
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Mẫu KHTN");

        // Generate Excel file and trigger download
        XLSX.writeFile(wb, "Mau_Nhap_Khach_Hang_Tiem_Nang.xlsx");

        // Show notification
        toast.success('Mẫu nhập khách hàng tiềm năng đã được tải xuống');
    };

    // Get current page items
    const getCurrentPageItems = () => {
        const startIndex = (currentPage - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredList.length);
        return filteredList.slice(startIndex, endIndex);
    };

    // Handle input change
    const handleInputChange = (field, value) => {
        setCurrentItem(prev => ({
            ...prev,
            [field]: value
        }));
    };

    // Modal handlers
    const handleOpenModal = (item = null) => {
        if (item) {
            editKHTN(item['ID_CTY']);
        } else {
            setIsEditMode(false);
            resetForm();
            setShowModal(true);
        }
    };

    const handleCloseModal = () => {
        setShowModal(false);
        setIsEditMode(false);
    };

    // Delete confirmation
    const handleOpenDeleteConfirmation = (item) => {
        setItemToDelete(item);
        setShowDeleteConfirmation(true);
    };

    const handleCloseDeleteConfirmation = () => {
        setShowDeleteConfirmation(false);
        setItemToDelete(null);
    };

    return (
        <div className={`min-h-screen bg-gray-50 `}>
            <div className="dark:bg-gray-900 transition-colors duration-300">
                {/* Loading Overlay */}
                {loading && (
                    <div className="fixed inset-0 bg-gray-800/70 dark:bg-black/80 backdrop-blur-sm z-50 flex justify-center items-center">
                        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-2xl flex flex-col items-center">
                            <div className="animate-spin text-primary-600 dark:text-primary-400 mb-4">
                                <RefreshCw className="h-10 w-10" />
                            </div>
                            <p className="text-gray-700 dark:text-gray-100 font-medium text-lg">Đang xử lý...</p>
                        </div>
                    </div>
                )}

                {/* Page Container */}
                <div className="container mx-auto px-4 md:px-6 lg:px-8 py-8">
                    {/* Header */}
                    <header className="sticky top-0 z-30 bg-white dark:bg-gray-800 shadow-md rounded-xl px-4 py-4 mb-8">
                        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between">
                            <div className="flex items-center space-x-4">
                                <div className="bg-primary-600 text-white p-3 rounded-lg shadow-lg">
                                    <Plus className="h-5 w-5" />
                                </div>
                                <h1 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-white">Quản lý Khách Hàng Tiềm Năng</h1>
                            </div>
                            <div className="flex items-center mt-4 sm:mt-0">
                                <button
                                    className="p-2 bg-gray-100 dark:bg-gray-700 rounded-full hover:bg-gray-200 dark:hover:bg-gray-600 transition-colors mr-2"
                                    onClick={() => loadKHTNList(true)}
                                    title="Làm mới dữ liệu"
                                >
                                    <RefreshCw className="h-5 w-5 text-primary-600 dark:text-primary-400" />
                                </button>
                                
                            </div>
                        </div>
                    </header>

                    {/* Excel Import Section */}
                    <div className="mb-6 bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md hover:shadow-lg transition-shadow">
                        <div className="flex items-center justify-between mb-4">
                            <div className="flex items-center">
                                <div className="bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 p-2 rounded-lg mr-3">
                                    <Upload className="h-5 w-5" />
                                </div>
                                <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Nhập dữ liệu từ Excel</h2>
                            </div>
                        </div>

                        <div className="border-t border-gray-200 dark:border-gray-700 pt-4">
                            <p className="text-sm text-gray-600 dark:text-gray-300 mb-3">
                                Tải lên file Excel (.xlsx, .xls) có chứa dữ liệu khách hàng tiềm năng. File cần có các cột: TÊN CÔNG TY, NGƯỜI LIÊN HỆ, SỐ ĐT NGƯỜI LIÊN HỆ, v.v.
                            </p>
                            <div className="flex flex-wrap gap-3">
                                <button
                                    className="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition flex items-center shadow-sm"
                                    onClick={() => fileInputRef.current?.click()}
                                >
                                    <Upload className="h-4 w-4 mr-2" /> Chọn file
                                </button>
                                <input
                                    type="file"
                                    className="hidden"
                                    ref={fileInputRef}
                                    accept=".xlsx, .xls, .csv"
                                    onChange={handleExcelFileChange}
                                />
                                <button
                                    className="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition flex items-center shadow-sm"
                                    onClick={createExcelTemplate}
                                >
                                    <FileText className="h-4 w-4 mr-2" /> Tải mẫu nhập
                                </button>
                                <button
                                    className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white rounded transition flex items-center shadow-sm"
                                    onClick={exportToExcel}
                                >
                                    <FileText className="h-4 w-4 mr-2" /> Xuất Excel
                                </button>
                            </div>
                        </div>

                        {/* Preview section */}
                        {showPreview && excelData && (
                            <div className="mt-4">
                                <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-2">Xem trước dữ liệu (5 dòng đầu tiên):</h3>
                                <div className="overflow-x-auto border rounded-lg dark:border-gray-700">
                                    <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                        <thead className="bg-gray-50 dark:bg-gray-700">
                                            <tr>
                                                {excelData.headers.map((header, index) => (
                                                    <th key={index} className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                        {header}
                                                    </th>
                                                ))}
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                            {excelData.rows.slice(0, 5).map((row, rowIndex) => (
                                                <tr key={rowIndex} className="hover:bg-gray-50 dark:hover:bg-gray-700">
                                                    {excelData.headers.map((_, colIndex) => (
                                                        <td key={colIndex} className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                                            {row[colIndex] || ''}
                                                        </td>
                                                    ))}
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                                <div className="flex justify-end space-x-3 mt-4">
                                    <button
                                        className="px-4 py-2 bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded hover:bg-gray-200 dark:hover:bg-gray-600 transition"
                                        onClick={() => {
                                            setShowPreview(false);
                                            setExcelData(null);
                                            if (fileInputRef.current) fileInputRef.current.value = '';
                                        }}
                                    >
                                        Hủy
                                    </button>
                                    <button
                                        className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition"
                                        onClick={importExcelData}
                                    >
                                        Nhập dữ liệu
                                    </button>
                                </div>
                            </div>
                        )}
                    </div>

                    {/* Main Content */}
                    <main>
                        {/* Search Bar and Add Button */}
                        <div className="mb-6 flex flex-col sm:flex-row gap-4">
                            <div className="relative flex-1">
                                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-5 w-5" />
                                <input
                                    type="text"
                                    placeholder="Tìm kiếm khách hàng tiềm năng..."
                                    className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 bg-white dark:bg-gray-800 dark:text-white"
                                    value={search}
                                    onChange={(e) => {
                                        setSearch(e.target.value);
                                        debouncedSearch(e.target.value);
                                    }}
                                />
                            </div>
                            <button
                                className="px-4 py-2 bg-primary-600 hover:bg-primary-700 text-white rounded-lg flex items-center justify-center transition-colors shadow-sm"
                                onClick={() => handleOpenModal()}
                            >
                                <Plus className="h-5 w-5 mr-2" />
                                Thêm khách hàng
                            </button>
                        </div>

                        {/* Danh sách khách hàng tiềm năng */}
                        <div className="bg-white dark:bg-gray-800 p-6 rounded-xl shadow-md mb-8">
                            <div className="flex items-center mb-5 pb-4 border-b border-gray-200 dark:border-gray-700">
                                <div className="bg-primary-100 dark:bg-primary-900 text-primary-700 dark:text-primary-300 p-2 rounded-lg mr-3">
                                    <Filter className="h-5 w-5" />
                                </div>
                                <h2 className="text-xl font-semibold text-gray-800 dark:text-white">Danh Sách Khách Hàng Tiềm Năng</h2>
                            </div>

                            {loading ? (
                                <div className="animate-pulse">
                                    <div className="h-12 bg-gray-200 dark:bg-gray-700 rounded-t-lg mb-1"></div>
                                    <div className="h-16 bg-gray-100 dark:bg-gray-800 mb-1"></div>
                                    <div className="h-16 bg-gray-100 dark:bg-gray-800 mb-1"></div>
                                    <div className="h-16 bg-gray-100 dark:bg-gray-800 mb-1"></div>
                                    <div className="h-16 bg-gray-100 dark:bg-gray-800 mb-1"></div>
                                    <div className="h-16 bg-gray-100 dark:bg-gray-800 rounded-b-lg"></div>
                                </div>
                            ) : (
                                <div className="overflow-x-auto">
                                    <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                                        <thead className="bg-gray-50 dark:bg-gray-700">
                                            <tr>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    ID
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Tên công ty
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Người liên hệ
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Số điện thoại
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Trạng thái
                                                </th>
                                                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Đánh giá
                                                </th>
                                                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                                    Thao tác
                                                </th>
                                            </tr>
                                        </thead>
                                        <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                                            {getCurrentPageItems().length > 0 ? (
                                                getCurrentPageItems().map((item) => (
                                                    <tr key={item['ID_CTY']} className="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white">
                                                            {item['ID_CTY']}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-700 dark:text-gray-300">
                                                            {item['TÊN CÔNG TY']}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                                            {item['NGƯỜI LIÊN HỆ']}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400">
                                                            {item['SỐ ĐT NGƯỜI LIÊN HỆ']}
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${item['CHỐT THÀNH KH'] === 'Đã chốt'
                                                                    ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'
                                                                    : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'
                                                                }`}>
                                                                {item['CHỐT THÀNH KH'] || 'Chưa'}
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap">
                                                            <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                                                {item['ĐÁNH GIÁ TIỂM NĂNG'] || 'Chưa đánh giá'}
                                                            </span>
                                                        </td>
                                                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                                            <button
                                                                onClick={() => handleOpenModal(item)}
                                                                className="text-indigo-600 dark:text-indigo-400 hover:text-indigo-900 dark:hover:text-indigo-300 mr-3 transition-colors"
                                                            >
                                                                <Edit className="h-5 w-5" />
                                                            </button>
                                                            <button
                                                                onClick={() => handleOpenDeleteConfirmation(item)}
                                                                className="text-red-600 dark:text-red-400 hover:text-red-900 dark:hover:text-red-300 transition-colors"
                                                            >
                                                                <Trash className="h-5 w-5" />
                                                            </button>
                                                        </td>
                                                    </tr>
                                                ))
                                            ) : (
                                                <tr>
                                                    <td colSpan="7" className="px-6 py-4 text-center text-sm text-gray-500 dark:text-gray-400">
                                                        Không có dữ liệu khách hàng tiềm năng
                                                    </td>
                                                </tr>
                                            )}
                                        </tbody>
                                    </table>
                                </div>
                            )}

                            {/* Pagination */}
                            {filteredList.length > 0 && !loading && (
                                <div className="flex flex-col sm:flex-row justify-between items-center border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
                                    <div className="flex items-center mb-4 sm:mb-0">
                                        <span className="text-sm text-gray-700 dark:text-gray-300 mr-2">Hiển thị</span>
                                        <select
                                            className="border border-gray-300 dark:border-gray-600 rounded-md px-2 py-1 text-sm bg-white dark:bg-gray-800 dark:text-white"
                                            value={itemsPerPage}
                                            onChange={(e) => setItemsPerPage(parseInt(e.target.value))}
                                        >
                                            <option value={10}>10</option>
                                            <option value={20}>20</option>
                                            <option value={50}>50</option>
                                            <option value={100}>100</option>
                                        </select>
                                        <span className="text-sm text-gray-700 dark:text-gray-300 ml-2">mục mỗi trang</span>
                                    </div>

                                    <div className="flex items-center">
                                        <span className="text-sm text-gray-700 dark:text-gray-300 mr-4">
                                            Trang {currentPage} / {totalPages || 1}
                                        </span>
                                        <nav className="flex space-x-1">
                                            <button
                                                onClick={() => setCurrentPage(1)}
                                                disabled={currentPage === 1}
                                                className={`px-3 py-1 rounded-md ${currentPage === 1
                                                    ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'
                                                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                                                    }`}
                                            >
                                                Đầu
                                            </button>
                                            <button
                                                onClick={() => setCurrentPage(prev => Math.max(prev - 1, 1))}
                                                disabled={currentPage === 1}
                                                className={`px-3 py-1 rounded-md ${currentPage === 1
                                                    ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'
                                                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                                                    }`}
                                            >
                                                <ChevronLeft className="h-4 w-4" />
                                            </button>

                                            {/* Page numbers */}
                                            {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                                                let pageNumber;

                                                if (totalPages <= 5) {
                                                    pageNumber = i + 1;
                                                } else if (currentPage <= 3) {
                                                    pageNumber = i + 1;
                                                } else if (currentPage >= totalPages - 2) {
                                                    pageNumber = totalPages - 4 + i;
                                                } else {
                                                    pageNumber = currentPage - 2 + i;
                                                }

                                                if (pageNumber > 0 && pageNumber <= totalPages) {
                                                    return (
                                                        <button
                                                            key={pageNumber}
                                                            onClick={() => setCurrentPage(pageNumber)}
                                                            className={`px-3 py-1 rounded-md ${currentPage === pageNumber
                                                                    ? 'bg-primary-600 text-white'
                                                                    : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                                                                }`}
                                                        >
                                                            {pageNumber}
                                                        </button>
                                                    );
                                                }
                                                return null;
                                            })}

                                            <button
                                                onClick={() => setCurrentPage(prev => Math.min(prev + 1, totalPages))}
                                                disabled={currentPage === totalPages}
                                                className={`px-3 py-1 rounded-md ${currentPage === totalPages
                                                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'
                                                        : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                                                    }`}
                                            >
                                                <ChevronRight className="h-4 w-4" />
                                            </button>
                                            <button
                                                onClick={() => setCurrentPage(totalPages)}
                                                disabled={currentPage === totalPages}
                                                className={`px-3 py-1 rounded-md ${currentPage === totalPages
                                                        ? 'bg-gray-100 dark:bg-gray-700 text-gray-400 cursor-not-allowed'
                                                        : 'bg-white dark:bg-gray-800 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 border border-gray-300 dark:border-gray-600'
                                                    }`}
                                            >
                                                Cuối
                                            </button>
                                        </nav>
                                    </div>
                                </div>
                            )}
                        </div>
                    </main>
                </div>

                {/* Modal thêm/sửa khách hàng */}
                {showModal && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4 overflow-hidden">
                        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-4xl w-full flex flex-col max-h-[90vh]">
                            <div className="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 p-6 sticky top-0 bg-white dark:bg-gray-800 rounded-t-xl z-10">
                                <h2 className="text-xl font-bold text-gray-800 dark:text-white">
                                    {isEditMode ? 'Cập nhật khách hàng tiềm năng' : 'Thêm khách hàng tiềm năng mới'}
                                </h2>
                                <button
                                    onClick={handleCloseModal}
                                    className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none"
                                >
                                    <X className="h-5 w-5" />
                                </button>
                            </div>

                            <div className="flex-1 overflow-y-auto p-6 pt-4 pb-28">
                                <form onSubmit={(e) => { e.preventDefault(); saveKHTN(); }}>
                                    {/* Phần 1: Thông tin công ty */}
                                    <div className="mb-6">
                                        <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-3 pb-2 border-b border-gray-200 dark:border-gray-700">
                                            Thông tin công ty
                                        </h3>
                                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    ID Công ty
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['ID_CTY']}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-gray-50 dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500 disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:cursor-not-allowed"
                                                    readOnly
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Ngày ghi nhận <span className="text-red-500">*</span>
                                                </label>
                                                <input
                                                    type="date"
                                                    value={currentItem['NGÀY GHI NHẬN']}
                                                    onChange={(e) => handleInputChange('NGÀY GHI NHẬN', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    required
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Tên công ty <span className="text-red-500">*</span>
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['TÊN CÔNG TY']}
                                                    onChange={(e) => handleInputChange('TÊN CÔNG TY', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên công ty"
                                                    required
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Tên viết tắt
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['TÊN VIẾT TẮT']}
                                                    onChange={(e) => handleInputChange('TÊN VIẾT TẮT', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên viết tắt"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Email công ty
                                                </label>
                                                <input
                                                    type="email"
                                                    value={currentItem['EMAIL CÔNG TY']}
                                                    onChange={(e) => handleInputChange('EMAIL CÔNG TY', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập email công ty"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Mã số thuế
                                                </label>
                                                <div className="flex">
                                                    <input
                                                        type="text"
                                                        value={currentItem['MST']}
                                                        onChange={(e) => handleInputChange('MST', e.target.value)}
                                                        className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-l bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                        placeholder="Nhập mã số thuế"
                                                    />
                                                    <button
                                                        type="button"
                                                        onClick={() => fetchCompanyInfo(currentItem['MST'])}
                                                        className="px-3 py-2 bg-blue-500 text-white rounded-r hover:bg-blue-600 transition flex items-center"
                                                        title="Tra cứu thông tin công ty"
                                                    >
                                                        <Search className="h-4 w-4" />
                                                    </button>
                                                </div>
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Ngày thành lập
                                                </label>
                                                <input
                                                    type="date"
                                                    value={currentItem['NGÀY THÀNH LẬP CTY']}
                                                    onChange={(e) => handleInputChange('NGÀY THÀNH LẬP CTY', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                />
                                            </div>

                                            <div className="sm:col-span-3">
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Địa chỉ
                                                </label>
                                                <textarea
                                                    value={currentItem['ĐỊA CHỈ']}
                                                    onChange={(e) => handleInputChange('ĐỊA CHỈ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    rows="2"
                                                    placeholder="Nhập địa chỉ công ty"
                                                ></textarea>
                                            </div>
                                        </div>
                                    </div>

                                    {/* Phần 2: Thông tin người liên hệ */}
                                    <div className="mb-6">
                                        <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-3 pb-2 border-b border-gray-200 dark:border-gray-700">
                                            Thông tin người liên hệ
                                        </h3>
                                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Người liên hệ <span className="text-red-500">*</span>
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['NGƯỜI LIÊN HỆ']}
                                                    onChange={(e) => handleInputChange('NGƯỜI LIÊN HỆ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên người liên hệ"
                                                    required
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    SĐT người liên hệ <span className="text-red-500">*</span>
                                                </label>
                                                <input
                                                    type="tel"
                                                    value={currentItem['SỐ ĐT NGƯỜI LIÊN HỆ']}
                                                    onChange={(e) => handleInputChange('SỐ ĐT NGƯỜI LIÊN HỆ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập số điện thoại"
                                                    required
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Email người liên hệ
                                                </label>
                                                <input
                                                    type="email"
                                                    value={currentItem['EMAIL NGƯỜI LIÊN HỆ']}
                                                    onChange={(e) => handleInputChange('EMAIL NGƯỜI LIÊN HỆ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập email người liên hệ"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Sinh nhật người liên hệ
                                                </label>
                                                <input
                                                    type="date"
                                                    value={currentItem['SINH NHẬT NGƯỜI LIÊN HỆ']}
                                                    onChange={(e) => handleInputChange('SINH NHẬT NGƯỜI LIÊN HỆ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Chức vụ
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['CHỨC VỤ']}
                                                    onChange={(e) => handleInputChange('CHỨC VỤ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập chức vụ"
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    {/* Phần 3: Thông tin tiếp cận */}
                                    <div className="mb-6">
                                        <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-3 pb-2 border-b border-gray-200 dark:border-gray-700">
                                            Thông tin tiếp cận
                                        </h3>
                                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Nguồn
                                                </label>
                                                <div className="relative" ref={nguonDropdownRef}>
                                                    <div
                                                        className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white flex justify-between items-center cursor-pointer"
                                                        onClick={() => setShowNguonDropdown(!showNguonDropdown)}
                                                    >
                                                        <span className={currentItem['NGUỒN'] ? '' : 'text-gray-500 dark:text-gray-400'}>
                                                            {currentItem['NGUỒN'] || 'Chọn nguồn'}
                                                        </span>
                                                        <ChevronDown className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                                                    </div>
                                                    {showNguonDropdown && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                                                            {nguonOptions.map((option) => (
                                                                <div
                                                                    key={option}
                                                                    className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer text-gray-800 dark:text-white"
                                                                    onClick={() => {
                                                                        handleInputChange('NGUỒN', option);
                                                                        setShowNguonDropdown(false);
                                                                    }}
                                                                >
                                                                    {option}
                                                                </div>
                                                            ))}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Tên người giới thiệu
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['TÊN NGƯỜI GIỚI THIỆU']}
                                                    onChange={(e) => handleInputChange('TÊN NGƯỜI GIỚI THIỆU', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên người giới thiệu"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    SĐT người giới thiệu
                                                </label>
                                                <input
                                                    type="tel"
                                                    value={currentItem['SỐ ĐT NGƯỜI GIỚI THIỆU']}
                                                    onChange={(e) => handleInputChange('SỐ ĐT NGƯỜI GIỚI THIỆU', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập số điện thoại người giới thiệu"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Sales phụ trách
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['SALES PHỤ TRÁCH']}
                                                    onChange={(e) => handleInputChange('SALES PHỤ TRÁCH', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên sales phụ trách"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Chốt thành KH
                                                </label>
                                                <div className="relative" ref={trangThaiDropdownRef}>
                                                    <div
                                                        className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white flex justify-between items-center cursor-pointer"
                                                        onClick={() => setShowTrangThaiDropdown(!showTrangThaiDropdown)}
                                                    >
                                                        <span>
                                                            {currentItem['CHỐT THÀNH KH'] || 'Chưa'}
                                                        </span>
                                                        <ChevronDown className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                                                    </div>
                                                    {showTrangThaiDropdown && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                                                            {trangThaiOptions.map((option) => (
                                                                <div
                                                                    key={option}
                                                                    className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer text-gray-800 dark:text-white"
                                                                    onClick={() => {
                                                                        handleInputChange('CHỐT THÀNH KH', option);
                                                                        setShowTrangThaiDropdown(false);
                                                                    }}
                                                                >
                                                                    {option}
                                                                </div>
                                                            ))}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Ngày chốt thành KH
                                                </label>
                                                <input
                                                    type="date"
                                                    value={currentItem['NGÀY CHỐT THÀNH KH']}
                                                    onChange={(e) => handleInputChange('NGÀY CHỐT THÀNH KH', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                />
                                            </div>
                                        </div>
                                    </div>

                                    {/* Phần 4: Thông tin nhu cầu và đánh giá */}
                                    <div className="mb-6">
                                        <h3 className="text-lg font-medium text-gray-800 dark:text-white mb-3 pb-2 border-b border-gray-200 dark:border-gray-700">
                                            Nhu cầu và đánh giá
                                        </h3>
                                        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Nhu cầu
                                                </label>
                                                <div className="relative" ref={nhuCauDropdownRef}>
                                                    <div
                                                        className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white flex justify-between items-center cursor-pointer"
                                                        onClick={() => setShowNhuCauDropdown(!showNhuCauDropdown)}
                                                    >
                                                        <span className={currentItem['NHU CẦU'] ? '' : 'text-gray-500 dark:text-gray-400'}>
                                                            {currentItem['NHU CẦU'] || 'Chọn nhu cầu'}
                                                        </span>
                                                        <ChevronDown className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                                                    </div>
                                                    {showNhuCauDropdown && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                                                            {nhuCauOptions.map((option) => (
                                                                <div
                                                                    key={option}
                                                                    className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer text-gray-800 dark:text-white"
                                                                    onClick={() => {
                                                                        handleInputChange('NHU CẦU', option);
                                                                        setShowNhuCauDropdown(false);
                                                                    }}
                                                                >
                                                                    {option}
                                                                </div>
                                                            ))}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Đánh giá tiềm năng
                                                </label>
                                                <div className="relative" ref={danhGiaDropdownRef}>
                                                    <div
                                                        className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white flex justify-between items-center cursor-pointer"
                                                        onClick={() => setShowDanhGiaDropdown(!showDanhGiaDropdown)}
                                                    >
                                                        <span className={currentItem['ĐÁNH GIÁ TIỂM NĂNG'] ? '' : 'text-gray-500 dark:text-gray-400'}>
                                                            {currentItem['ĐÁNH GIÁ TIỂM NĂNG'] || 'Chọn đánh giá'}
                                                        </span>
                                                        <ChevronDown className="h-4 w-4 text-gray-500 dark:text-gray-400" />
                                                    </div>
                                                    {showDanhGiaDropdown && (
                                                        <div className="absolute z-10 mt-1 w-full bg-white dark:bg-gray-700 border border-gray-200 dark:border-gray-600 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                                                            {danhGiaOptions.map((option) => (
                                                                <div
                                                                    key={option}
                                                                    className="px-3 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 cursor-pointer text-gray-800 dark:text-white"
                                                                    onClick={() => {
                                                                        handleInputChange('ĐÁNH GIÁ TIỂM NĂNG', option);
                                                                        setShowDanhGiaDropdown(false);
                                                                    }}
                                                                >
                                                                    {option}
                                                                </div>
                                                            ))}
                                                        </div>
                                                    )}
                                                </div>
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Nhân viên chăm sóc
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['NHÂN VIÊN CHĂM SÓC']}
                                                    onChange={(e) => handleInputChange('NHÂN VIÊN CHĂM SÓC', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập tên nhân viên chăm sóc"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Số chứng từ
                                                </label>
                                                <input
                                                    type="text"
                                                    value={currentItem['SỐ CHỨNG TỪ']}
                                                    onChange={(e) => handleInputChange('SỐ CHỨNG TỪ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập số chứng từ"
                                                />
                                            </div>

                                            <div>
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Số tiền
                                                </label>
                                                <input
                                                    type="number"
                                                    value={currentItem['SỐ TIỀN']}
                                                    onChange={(e) => handleInputChange('SỐ TIỀN', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    placeholder="Nhập số tiền"
                                                />
                                            </div>

                                            <div className="md:col-span-3">
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Ghi chú nhu cầu
                                                </label>
                                                <textarea
                                                    value={currentItem['GHI CHÚ NHU CẦU']}
                                                    onChange={(e) => handleInputChange('GHI CHÚ NHU CẦU', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    rows="3"
                                                    placeholder="Nhập ghi chú về nhu cầu của khách hàng"
                                                ></textarea>
                                            </div>

                                            <div className="md:col-span-3">
                                                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 block">
                                                    Lịch sử
                                                </label>
                                                <textarea
                                                    value={currentItem['LỊCH SỬ']}
                                                    onChange={(e) => handleInputChange('LỊCH SỬ', e.target.value)}
                                                    className="w-full text-sm px-3 py-2 border border-gray-300 dark:border-gray-600 rounded resize-none bg-white dark:bg-gray-700 text-gray-800 dark:text-white focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
                                                    rows="3"
                                                    placeholder="Nhập lịch sử tiếp xúc với khách hàng"
                                                ></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </form>
                            </div>

                            {/* Fixed footer */}
                            <div className="border-t border-gray-200 dark:border-gray-700 p-6 sticky bottom-0 bg-white dark:bg-gray-800 rounded-b-xl z-10 shadow-md">
                                <div className="flex justify-end space-x-3">
                                    <button
                                        type="button"
                                        onClick={handleCloseModal}
                                        className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors shadow-sm"
                                        disabled={isSubmitting}
                                    >
                                        Hủy
                                    </button>
                                    <button
                                        type="button"
                                        onClick={saveKHTN}
                                        disabled={isSubmitting}
                                        className={`px-5 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-colors shadow-sm flex items-center ${isSubmitting ? 'opacity-50 cursor-not-allowed' : ''}`}
                                    >
                                        {isSubmitting ? (
                                            <>
                                                <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                                                Đang lưu...
                                            </>
                                        ) : (
                                            <>Lưu</>
                                        )}
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* Modal xác nhận xóa */}
                {showDeleteConfirmation && (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                        <div className="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-md w-full p-6">
                            <div className="flex justify-between items-center border-b border-gray-200 dark:border-gray-700 pb-4 mb-5">
                                <h2 className="text-xl font-bold text-gray-800 dark:text-white">Xác nhận xóa</h2>
                                <button
                                    onClick={handleCloseDeleteConfirmation}
                                    className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none"
                                >
                                    <X className="h-5 w-5" />
                                </button>
                            </div>

                            <div className="space-y-5">
                                <div className="bg-red-50 dark:bg-red-900/30 border border-red-100 dark:border-red-900 rounded-lg p-4">
                                    <p className="text-red-700 dark:text-red-200">
                                        Bạn có chắc chắn muốn xóa khách hàng tiềm năng <strong>{itemToDelete?.['TÊN CÔNG TY']}</strong>?
                                    </p>
                                    <p className="text-sm text-red-600 dark:text-red-300 mt-2">
                                        Hành động này không thể hoàn tác.
                                    </p>
                                </div>

                                <div className="flex justify-end gap-3 pt-4 border-t border-gray-200 dark:border-gray-700">
                                    <button
                                        onClick={handleCloseDeleteConfirmation}
                                        className="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors shadow-sm"
                                    >
                                        Hủy
                                    </button>
                                    <button
                                        onClick={deleteKHTN}
                                        className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors shadow-sm flex items-center"
                                    >
                                        <Trash className="h-4 w-4 mr-2" />
                                        Xóa
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                )}

                {/* Toast Notifications */}
                <ToastContainer
                    position="top-right"
                    autoClose={3000}
                    hideProgressBar={false}
                    newestOnTop
                    closeOnClick
                    rtl={false}
                    pauseOnFocusLoss
                    draggable
                    pauseOnHover
                />
            </div>
        </div>
    );
};

export default KHTNManagement;